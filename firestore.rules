/**
 * @fileOverview Firestore Security Rules for Hairline Studio Online.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for customer data and their appointments.
 * Only authenticated users can access their own data. Service data is publicly readable.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles.  Only the customer themselves can read/write their profile.
 * - /customers/{customerId}/appointments/{appointmentId}: Stores appointments for each customer. Only the customer can manage their appointments.
 * - /services/{serviceId}: Stores services offered by the salon. Publicly readable, but only admins can create/update/delete.
 * - /roles_admin/{uid}: Documents in this collection grant admin privileges. Existence of a document with a specific UID grants admin role to that user.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed.
 * - Service data is public for `get` and `list` operations.
 *
 * Denormalization for Authorization:
 * - Appointments denormalize `customerId` to allow direct authorization without needing to fetch the parent customer document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is an existing owner (signed in and the document exists).
      * @path N/A
      * @allow N/A
      * @deny N/A
      * @principle Combines authentication and existence check for safe updates and deletes.
      */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @path N/A
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for customer profiles.
     * @path /customers/{customerId}
     * @allow (create) User A creating their own profile (auth.uid == customerId).
     * @allow (get, update, delete) User A reading/updating/deleting their own profile (auth.uid == customerId).
     * @deny (create) User A creating a profile with a mismatched ID (auth.uid != customerId).
     * @deny (get, update, delete) User A trying to access User B's profile (auth.uid != customerId).
     * @principle Enforces document ownership for customer profiles.
     */
    match /customers/{customerId} {
      allow get: if isOwner(customerId);
      allow list: if false; // Prevent listing all users.
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id; // Enforce immutability of customerId
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Rules for appointments within a customer profile.
     * @path /customers/{customerId}/appointments/{appointmentId}
     * @allow (create) User A creating an appointment for themselves (auth.uid == customerId).
     * @allow (get, update, delete) User A reading/updating/deleting their own appointments (auth.uid == customerId).
     * @deny (create) User A creating an appointment with a mismatched customerId.
     * @deny (get, update, delete) User A trying to access User B's appointments (auth.uid != customerId).
     * @principle Enforces document ownership for appointments.  Allows only the owning customer to manage their appointments.
     */
    match /customers/{customerId}/appointments/{appointmentId} {
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId; //Enforce immutability of customerId
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Rules for services offered by the salon.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read the service data.
     * @allow (create, update, delete) Only admins can manage services.
     * @principle Allows public read access to service information, but restricts write access to admins.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for granting admin roles.
      * @path /roles_admin/{uid}
      */
    match /roles_admin/{uid} {
        allow read: if false;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}