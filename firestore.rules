/**
 * @fileOverview Firestore Security Rules for Hairline Studio Online.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for customer data, with customers having full control over their profiles and appointments.
 * Services are publicly readable, but not writable by clients.
 * Administrative privileges are granted based on the existence of a document in the `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - `/customers/{customerId}`: Stores customer profiles, accessible only by the owning user.
 * - `/customers/{customerId}/appointments/{appointmentId}`: Stores appointments for each customer, accessible only by the owning customer. Includes denormalized 'customerId' for authorization independence.
 * - `/services/{serviceId}`: Stores service definitions, publicly readable.
 * - `/roles_admin/{uid}`: Used to grant administrative privileges.
 *
 * Key Security Decisions:
 * - Customers can only access their own data and appointments.
 * - Services are publicly readable to facilitate display in the application.
 * - Only administrators can modify services.
 * - Listing all customers or appointments is disallowed to prevent information disclosure.
 * - Denormalization: The `appointments` subcollection within each customer document avoids hierarchical authorization dependencies by denormalizing the `customerId` into the appointment document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to customer profiles based on ownership.
     * @path /customers/{customerId}
     * @allow (create) - User with UID 'user_abc' can create a customer profile if customerId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile at /customers/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a customer profile with customerId 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile at /customers/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;

      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Grants access to appointments based on customer ownership.
     * @path /customers/{customerId}/appointments/{appointmentId}
     * @allow (create) - User with UID 'user_abc' can create an appointment under their profile at /customers/user_abc/appointments/{appointmentId} if customerId matches.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete an appointment under their profile at /customers/user_abc/appointments/{appointmentId}.
     * @deny (create) - User with UID 'user_xyz' cannot create an appointment under the /customers/user_abc/appointments collection.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete appointments under the /customers/user_abc/appointments collection.
     * @principle Restricts access to a user's own data tree.
     */
    match /customers/{customerId}/appointments/{appointmentId} {
      function isOwner(customerId) {
        return request.auth != null && request.auth.uid == customerId;
      }
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);

      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Grants public read access to services.  Write access is denied.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user (or no user) can read service data.
     * @deny (create, update, delete) - No client can create, update, or delete service data.
     * @principle Allows public reads but restricts writes to prevent unauthorized modifications.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Grants admin privileges based on the existence of a document in this collection.
       * @path /roles_admin/{uid}
       */
      match /roles_admin/{uid} {
        function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin() && request.auth.uid == uid;
        allow update: if false;
        allow delete: if isAdmin();
      }

  }
}